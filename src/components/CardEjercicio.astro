---
import { Icon } from 'astro-icon/components'
const props = Astro.props
const {
	title,
	comentarios,
	ejemploUrl,
	urlGitHub,
	repoUrl,
	defaultBranch,
	fechaDeEntrega,
	obligatorio,
	consultas,
} = Astro.props
---

<div class="feature m-3">
	<div class="flex h-full w-full flex-col">
		{
			obligatorio && (
				<div class="obligatorio-container">
					<span class="text-obligatorio">Esta actividad es obligatoria</span>
					<Icon
						class="icon-obligatorio"
						name="ion:alert-outline"
					/>
				</div>
			)
		}
		{
			consultas && (
				<div class="obligatorio-container">
					<span class="text-obligatorio">Ejercicio de clase de consultas</span>
					<svg
						class="icon-svg "
						xmlns="http://www.w3.org/2000/svg"
						width="24"
						height="24"
						viewBox="0 0 24 24"
						{...props}>
						<mask
							id="lineMdGithubLoop0"
							width="24"
							height="24"
							x="0"
							y="0">
							<g fill="#fff">
								<ellipse
									cx="9.5"
									cy="9"
									rx="1.5"
									ry="1"
								/>
								<ellipse
									cx="14.5"
									cy="9"
									rx="1.5"
									ry="1"
								/>
							</g>
						</mask>
						<g
							fill="none"
							stroke="currentColor"
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="3">
							<path
								stroke-dasharray="32"
								stroke-dashoffset="32"
								d="M12 4c1.67 0 2.61 0.4 3 0.5c0.53 -0.43 1.94 -1.5 3.5 -1.5c0.34 1 0.29 2.22 0 3c0.75 1 1 2 1 3.5c0 2.19 -0.48 3.58 -1.5 4.5c-1.02 0.92 -2.11 1.37 -3.5 1.5c0.65 0.54 0.5 1.87 0.5 2.5c0 0.73 0 3 0 3M12 4c-1.67 0 -2.61 0.4 -3 0.5c-0.53 -0.43 -1.94 -1.5 -3.5 -1.5c-0.34 1 -0.29 2.22 0 3c-0.75 1 -1 2 -1 3.5c0 2.19 0.48 3.58 1.5 4.5c1.02 0.92 2.11 1.37 3.5 1.5c-0.65 0.54 -0.5 1.87 -0.5 2.5c0 0.73 0 3 0 3">
								<animate
									fill="freeze"
									attributeName="stroke-dashoffset"
									dur="0.105s"
									values="32;0"
								/>
							</path>
							<path
								stroke-dasharray="10"
								stroke-dashoffset="10"
								d="M9 19c-1.406 0-2.844-.563-3.688-1.188C4.47 17.188 4.22 16.157 3 15.5">
								<animate
									attributeName="d"
									dur="0.45s"
									repeatCount="indefinite"
									values="M9 19c-1.406 0-2.844-.563-3.688-1.188C4.47 17.188 4.22 16.157 3 15.5;M9 19c-1.406 0-3-.5-4-.5-.532 0-1 0-2-.5;M9 19c-1.406 0-2.844-.563-3.688-1.188C4.47 17.188 4.22 16.157 3 15.5"
								/>
								<animate
									fill="freeze"
									attributeName="stroke-dashoffset"
									begin="0.12s"
									dur="0.03s"
									values="10;0"
								/>
							</path>
						</g>
						<rect
							width="8"
							height="4"
							x="8"
							y="11"
							fill="currentColor"
							mask="url(#lineMdGithubLoop0)">
							<animate
								attributeName="y"
								dur="1.5s"
								keyTimes="0;0.45;0.46;0.54;0.55;1"
								repeatCount="indefinite"
								values="11;11;7;7;11;11"
							/>
						</rect>
					</svg>
				</div>
			)
		}
		<h3 class="p-2 text-xl">{title}</h3>
		<ul>
			{comentarios.map(({ name }) => <li>{name}</li>)}
		</ul>

		{
			fechaDeEntrega && (
				<p class="p-2 text-lg font-bold">
					Fecha de entrega: <span class="font-thin">{fechaDeEntrega}</span>
				</p>
			)
		}

		{
			ejemploUrl && (
				<a
					class="has-icon button preview-button"
					href={ejemploUrl}
					target="_blank">
					<Icon name="ion:arrow-up-right-box-outline" />
					Ver el Ejemplo
				</a>
			)
		}

		{
			urlGitHub && (
				<a
					href={urlGitHub}
					target="_blank"
					class="has-icon button preview-button">
					<Icon name="ion:logo-github" />
					Aceptar la asignación
				</a>
			)
		}

		<a
			href={`https://github.com/${repoUrl}/blob/${defaultBranch}/README.md`}
			target="_blank"
			class="has-icon button preview-button">
			<Icon name="ion:eye" />
			Consigna
		</a>
		<!-- 
		<a
			href={urlGitHub}
			class="is-mobile has-icon button">
			<Icon name="ion:logo-github" />Ir al repositorio</a
		>
		-->
	</div>
</div>

<style lang="scss">
	@use '../assets/scss/base/breakpoint' as *;

	.feature {
		position: relative;
		width: calc(100% - 0.5rem);
		padding: 2rem;

		> * {
			position: relative;
			z-index: 2;
		}

		@include breakpoint(large) {
			width: 70%;
		}

		&::before,
		&::after {
			content: '';
			position: absolute;
		}

		&::before {
			inset: 0;
			background-color: var(--neutral-100);
			border: 3px solid var(--neutral-700);
			border-radius: 1rem;
			box-shadow: 0 0 0 6px var(--neutral-100);
			z-index: 1;
		}

		&::after {
			background-color: var(--action-color);
			inset: 1rem -0.85rem -0.85rem 1rem;
			border-radius: 1rem;
			z-index: 0;
		}
	}

	:global(.feature [data-icon]) {
		height: auto;
		width: 4rem;
		color: var(--action-color);
	}

	:global(.darkmode .feature::before) {
		background-color: var(--dark-100);
		box-shadow: 0 0 0 6px var(--dark-100);
	}

	a {
		background-color: var(--neutral-900) !important;
		border-width: 0;
		width: 95%;
		color: white;
		margin: auto;
		margin-top: 10px;
		margin-bottom: 10px;
		padding: 10px;
		text-align: center;
	}

	a:hover {
		background-color: black !important;
	}

	.preview-button:visited {
		color: lightgray; /* Elige un color visible que se adapte a tu diseño */
	}

	.is-mobile {
		@media (max-width: 550px) {
			width: 12rem;
			height: 3rem;
			display: flex;
		}
		@media (min-width: 550px) {
			display: none;
		}
	}

	.is-desktop {
		@media (max-width: 550px) {
			display: none;
		}
		@media (min-width: 550px) {
			display: flex;
		}
	}
	.obligatorio-container {
		position: absolute !important;
		top: 0;
		right: -3rem;
		transform: translateY(-100%);
		display: flex;
		align-items: center;
		justify-content: end;
		background-color: var(--action-color);
		border-radius: 50%;
		width: 45px; /* Tamaño inicial del contenedor */
		height: 45px; /* Altura inicial para mantener el ícono centrado */
		overflow: hidden;
		transition: width 0.6s ease, border-radius 0.7s ease;

		&:hover,
		&:focus-within {
			width: 275px; /* Tamaño expandido del contenedor */
			border-radius: 10px; /* Ajusta la curva de las esquinas al expandir */
		}

		&:hover .text-obligatorio,
		&:focus-within .text-obligatorio {
			opacity: 1;
			transform: translateX(-10%);
			transition: transform 0.4s ease 0.2s, opacity 0.1s ease 0.3s; /* Añade un pequeño retraso para que la animación del texto inicie después de la expansión */
		}
	}

	.icon-obligatorio {
		height: 45px;
		width: 45px;
		color: var(--dark-100);
	}

	.text-obligatorio {
		position: absolute;
		right: 10px; /* Ajusta para que el texto se alinee correctamente cuando aparezca */
		white-space: nowrap; /* Evita que el texto se rompa en líneas múltiples */
		font-size: 1rem;
		color: var(--dark-100);
		font-weight: bold;
		transform: translateX(-100%); /* Inicia fuera de la vista a la derecha */
		opacity: 0;
		z-index: 0;
		transition: transform 0.5s ease, opacity 0.1s ease;
	}

	.icon-svg {
		height: 45px;
		width: 45px;
	}
</style>
